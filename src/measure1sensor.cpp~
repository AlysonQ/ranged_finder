#include <ros/ros.h>
#include "std_msgs/Int16.h"
#include <stdlib.h>
#include <stdio.h>
#include "vl53l0x_api.h"
#include "vl53l0x_platform.h"
#include <unistd.h>
extern "C" {  
    #include "jetsonGPIO.h"  
}  
#include "ranged_finder/getSensorData.h"
#include "ranged_finder/RangedFinder.h"

 
#define DEV2_I2C_ADDR 0x29

#define sleeptime  100000

VL53L0X_Dev_t SensorOne;
VL53L0X_Dev_t *pSensorOne = &SensorOne;
VL53L0X_RangingMeasurementData_t    SensorOneRangingMeasurementData;
uint32_t refSpadCount;
uint8_t isApertureSpads;
uint8_t VhvSettings;
uint8_t PhaseCal;

ranged_finder::RangedFinder sensorData;

bool getSensorData(ranged_finder::getSensorData::Request &req,
                   ranged_finder::getSensorData::Response &res)
{
    ROS_INFO("[Alyson] getSensorDataService !!\n");
    res.Left = SensorOneRangingMeasurementData.RangeMilliMeter;
    ROS_INFO("res.Left=%d \n",res.Left);
    //ROS_INFO("res.Middle=%d \n",res.Middle);
    //ROS_INFO("res.Right=%d \n",res.Right);
    return true;
}


void Sensor_Setup()
{
    printf("\n\n>>>>>>>>>>>>>>>  Sensor Setup <<<<<<<<<<<<<<<<<\n\n");
    //Step 1 :: Set Sensor One
    //ROS_INFO(">>>>>>>>>>>>>>> [Setting Sensor One]---------- >START");
    usleep(sleeptime);
    pSensorOne->I2cDevAddr      = DEV2_I2C_ADDR;
    pSensorOne->fd = VL53L0X_i2c_init("/dev/i2c-1", pSensorOne->I2cDevAddr);
    //ROS_INFO("DataInit----------------------------------------- >START");
    VL53L0X_DataInit(&SensorOne);
    VL53L0X_StaticInit(&SensorOne);
    VL53L0X_PerformRefCalibration(pSensorOne,
        		&VhvSettings, &PhaseCal);
    VL53L0X_PerformRefSpadManagement(pSensorOne,
        		&refSpadCount, &isApertureSpads);
    //ROS_INFO("DataInit----------------------------------------- >END");
}

void Sensor_Calibration (VL53L0X_Dev_t *pDevice)
{
    VL53L0X_SetDeviceMode(pDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING);
    VL53L0X_SetLimitCheckEnable(pDevice,
        		    VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    VL53L0X_SetLimitCheckEnable(pDevice,
        		    VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    VL53L0X_SetLimitCheckValue(pDevice,
        		    VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        		(FixPoint1616_t)(0.25*65536));
    VL53L0X_SetLimitCheckValue(pDevice,
        		    VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
        		(FixPoint1616_t)(18*65536));			
    VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pDevice,
        		    33000);
    VL53L0X_SetVcselPulsePeriod(pDevice, 
		            VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
    VL53L0X_SetVcselPulsePeriod(pDevice, 
		            VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
					
    VL53L0X_SetVcselPulsePeriod(pDevice, 
		            VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
					
	VL53L0X_SetVcselPulsePeriod(pDevice, 
		            VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
}


void Start_Ranging()
{
    //printf("\n\n***************Start ranging***************\n\n");
    VL53L0X_PerformSingleRangingMeasurement(pSensorOne,
                		&SensorOneRangingMeasurementData);

    ROS_INFO ("Sensor One distance = %d \n",SensorOneRangingMeasurementData.RangeMilliMeter);
}

int main(int argc, char **argv)
{

    ros::init(argc, argv, "ranged_finder");
    ros::NodeHandle nh;
    ros::Publisher rang_pub = nh.advertise<ranged_finder::RangedFinder>("/ranged_finder_data", 1);
    ros::ServiceServer getSensorDataService = nh.advertiseService("get_sensor_data_service" ,getSensorData);
   
    Sensor_Setup();

    //Step 4 :: Calibration Sensor and Get Sensor Value 
    Sensor_Calibration(pSensorOne);

    printf("\n\n***************Start ranging***************\n\n");
    while (ros::ok()){
        Start_Ranging();
        rang_pub.publish(sensorData);
        ros::spinOnce();
    }
 
    VL53L0X_i2c_close();
    return (0);
}

